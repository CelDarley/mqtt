#!/usr/bin/env python3
"""
Script de teste para demonstrar o funcionamento da API MQTT
"""

import requests
import json
import time

# Configura√ß√µes da API
API_BASE_URL = "http://localhost:8000/api/mqtt"

def test_create_topic():
    """Teste de cria√ß√£o de t√≥pico"""
    print("=== TESTE: Criar T√≥pico ===")
    
    data = {
        "name": "teste/dispositivo",
        "description": "T√≥pico para testes"
    }
    
    response = requests.post(f"{API_BASE_URL}/topics", json=data)
    
    if response.status_code == 201:
        result = response.json()
        print("‚úÖ T√≥pico criado com sucesso!")
        print(f"   ID: {result['data']['id']}")
        print(f"   Nome: {result['data']['name']}")
        return result['data']['name']
    else:
        print(f"‚ùå Erro ao criar t√≥pico: {response.status_code}")
        print(response.text)
        return None

def test_list_topics():
    """Teste de listagem de t√≥picos"""
    print("\n=== TESTE: Listar T√≥picos ===")
    
    response = requests.get(f"{API_BASE_URL}/topics")
    
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ T√≥picos listados com sucesso!")
        print(f"   Total de t√≥picos: {len(result['data'])}")
        for topic in result['data']:
            print(f"   - {topic['name']} (ID: {topic['id']})")
    else:
        print(f"‚ùå Erro ao listar t√≥picos: {response.status_code}")
        print(response.text)

def test_send_message(topic_name):
    """Teste de envio de mensagem"""
    print(f"\n=== TESTE: Enviar Mensagem ===")
    
    data = {
        "topico": topic_name,
        "mensagem": "liberar"
    }
    
    response = requests.post(f"{API_BASE_URL}/send-message", json=data)
    
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ Mensagem enviada com sucesso!")
        print(f"   T√≥pico: {result['data']['topic']}")
        print(f"   Mensagem: {result['data']['message']}")
    else:
        print(f"‚ùå Erro ao enviar mensagem: {response.status_code}")
        print(response.text)

def test_send_message_invalid_topic():
    """Teste de envio de mensagem para t√≥pico inexistente"""
    print(f"\n=== TESTE: Enviar Mensagem (T√≥pico Inexistente) ===")
    
    data = {
        "topico": "topico/inexistente",
        "mensagem": "liberar"
    }
    
    response = requests.post(f"{API_BASE_URL}/send-message", json=data)
    
    if response.status_code == 404:
        result = response.json()
        print("‚úÖ Erro esperado - T√≥pico n√£o existe!")
        print(f"   Mensagem: {result['message']}")
    else:
        print(f"‚ùå Comportamento inesperado: {response.status_code}")
        print(response.text)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTES DA API MQTT")
    print("=" * 50)
    
    # Teste 1: Listar t√≥picos existentes
    test_list_topics()
    
    # Teste 2: Criar novo t√≥pico
    topic_name = test_create_topic()
    
    if topic_name:
        # Teste 3: Enviar mensagem para t√≥pico v√°lido
        test_send_message(topic_name)
        
        # Aguardar um pouco
        time.sleep(1)
        
        # Teste 4: Enviar mensagem para t√≥pico inv√°lido
        test_send_message_invalid_topic()
    
    print("\n" + "=" * 50)
    print("‚úÖ TESTES CONCLU√çDOS!")
    print("\nPara testar o recebimento de mensagens, execute:")
    print("python3 exemplo_dispositivo.py")

if __name__ == "__main__":
    main() 