{
	"info": {
		"_postman_id": "mqtt-api-laravel-collection",
		"name": "API MQTT Laravel - Cole√ß√£o Completa",
		"description": "Cole√ß√£o completa para testar todos os endpoints da API MQTT Laravel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345"
	},
	"item": [
		{
			"name": "üîç GET - Listar T√≥picos",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success property\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Response has data array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚ûï POST - Criar T√≥pico",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{unique_topic_name}}\",\n    \"description\": \"T√≥pico de teste criado via Postman\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar nome √∫nico para o t√≥pico",
							"var timestamp = new Date().getTime();",
							"var topicName = \"teste/\" + timestamp;",
							"pm.environment.set(\"unique_topic_name\", topicName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"T√≥pico criado com sucesso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include(\"criado com sucesso\");",
							"});",
							"",
							"pm.test(\"T√≥pico tem ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data.id).to.be.a('number');",
							"});",
							"",
							"// Salvar ID para uso posterior",
							"if (pm.response.json().success) {",
							"    pm.environment.set(\"last_topic_id\", pm.response.json().data.id);",
							"    pm.environment.set(\"last_topic_name\", pm.response.json().data.name);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üì§ POST - Enviar Mensagem",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"topico\": \"{{last_topic_name}}\",\n    \"mensagem\": \"Teste de mensagem via Postman - {{$timestamp}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/mqtt/send-message",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"send-message"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Mensagem enviada com sucesso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include(\"enviada com sucesso\");",
							"});",
							"",
							"pm.test(\"Resposta cont√©m dados da mensagem\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('topic');",
							"    pm.expect(jsonData.data).to.have.property('message');",
							"    pm.expect(jsonData.data).to.have.property('timestamp');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üîç GET - Obter T√≥pico por ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics/{{last_topic_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics",
						"{{last_topic_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"T√≥pico encontrado\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data).to.have.property('id');",
							"    pm.expect(jsonData.data.id).to.eql(parseInt(pm.environment.get(\"last_topic_id\")));",
							"});",
							"",
							"pm.test(\"T√≥pico tem todos os campos\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.have.property('name');",
							"    pm.expect(jsonData.data).to.have.property('description');",
							"    pm.expect(jsonData.data).to.have.property('created_at');",
							"    pm.expect(jsonData.data).to.have.property('updated_at');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚úèÔ∏è PUT - Atualizar T√≥pico",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{last_topic_name}}/atualizado\",\n    \"description\": \"Descri√ß√£o atualizada via Postman - {{$timestamp}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics/{{last_topic_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics",
						"{{last_topic_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"T√≥pico atualizado com sucesso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include(\"atualizado com sucesso\");",
							"});",
							"",
							"pm.test(\"Dados foram atualizados\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.name).to.include(\"atualizado\");",
							"    pm.expect(jsonData.data.description).to.include(\"atualizada\");",
							"});",
							"",
							"// Atualizar nome do t√≥pico no ambiente",
							"if (pm.response.json().success) {",
							"    pm.environment.set(\"last_topic_name\", pm.response.json().data.name);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üóëÔ∏è DELETE - Deletar T√≥pico",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics/{{last_topic_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics",
						"{{last_topic_id}}"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"T√≥pico deletado com sucesso\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include(\"deletado com sucesso\");",
							"});",
							"",
							"// Limpar vari√°veis de ambiente",
							"pm.environment.unset(\"last_topic_id\");",
							"pm.environment.unset(\"last_topic_name\");"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üß™ Teste de Valida√ß√£o - T√≥pico sem Nome",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"T√≥pico sem nome para teste de valida√ß√£o\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422 (Validation Error)\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Erro de valida√ß√£o retornado\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData).to.have.property('errors');",
							"    pm.expect(jsonData.errors).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üß™ Teste de Erro - T√≥pico Inexistente",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/mqtt/topics/999999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"topics",
						"999999"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 (Not Found)\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Erro de n√£o encontrado\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include(\"n√£o encontrado\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üß™ Teste de Mensagem - T√≥pico Inexistente",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"topico\": \"topico/inexistente\",\n    \"mensagem\": \"Mensagem para t√≥pico que n√£o existe\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/mqtt/send-message",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mqtt",
						"send-message"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 (Not Found)\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Erro de t√≥pico n√£o encontrado\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include(\"n√£o encontrado\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global executado antes de cada request",
					"console.log('Executando request para: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global executado ap√≥s cada response",
					"console.log('Response status: ' + pm.response.status);",
					"console.log('Response time: ' + pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://10.100.0.200:8000",
			"type": "string"
		},
		{
			"key": "mqtt_server",
			"value": "10.100.0.21",
			"type": "string"
		},
		{
			"key": "mqtt_port",
			"value": "1883",
			"type": "string"
		},
		{
			"key": "mqtt_username",
			"value": "darley",
			"type": "string"
		},
		{
			"key": "mqtt_password",
			"value": "yhvh77",
			"type": "string"
		}
	]
} 