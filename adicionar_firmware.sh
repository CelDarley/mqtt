#!/bin/bash

# Script para adicionar firmware OTA - Sistema MQTT IoT
# Uso: ./adicionar_firmware.sh <caminho_firmware> <tipo_dispositivo> <versao>

echo "üöÄ Adicionador de Firmware OTA - Sistema MQTT IoT"
echo "================================================"

# Verificar argumentos
if [ $# -lt 3 ]; then
    echo "‚ùå Uso: $0 <caminho_firmware> <tipo_dispositivo> <versao>"
    echo ""
    echo "üìã Exemplos:"
    echo "  $0 /home/user/firmware.bin sensor_de_temperatura v1.0.0"
    echo "  $0 ./meu_firmware.bin led_de_controle v2.1.0"
    echo ""
    echo "üîç Tipos de dispositivos cadastrados:"
    curl -s "http://localhost:8000/api/mqtt/device-types" 2>/dev/null | jq -r '.data[]? | "  - \(.name | ascii_downcase | gsub(" "; "_") | gsub("√£"; "a") | gsub("√ß"; "c")) (ID: \(.id))"' 2>/dev/null || echo "  ‚ùå N√£o foi poss√≠vel listar (API offline)"
    exit 1
fi

FIRMWARE_FILE="$1"
DEVICE_TYPE="$2" 
VERSION="$3"

# Valida√ß√µes
echo "üîç Validando arquivos..."

if [ ! -f "$FIRMWARE_FILE" ]; then
    echo "‚ùå Arquivo de firmware n√£o encontrado: $FIRMWARE_FILE"
    exit 1
fi

if [ ! -r "$FIRMWARE_FILE" ]; then
    echo "‚ùå Sem permiss√£o de leitura no arquivo: $FIRMWARE_FILE"
    exit 1
fi

FILE_SIZE=$(stat -c%s "$FIRMWARE_FILE")
if [ $FILE_SIZE -eq 0 ]; then
    echo "‚ùå Arquivo de firmware est√° vazio"
    exit 1
fi

echo "‚úÖ Arquivo v√°lido: $(basename $FIRMWARE_FILE) ($(numfmt --to=iec $FILE_SIZE))"

# Verificar se nginx est√° configurado
if [ ! -d "/var/www/firmware" ]; then
    echo "‚ö†Ô∏è  Estrutura OTA n√£o configurada. Configurando agora..."
    
    if [ -f "./setup-nginx-ota.sh" ]; then
        echo "üõ†Ô∏è  Executando configura√ß√£o nginx..."
        sudo ./setup-nginx-ota.sh
    else
        echo "‚ùå Script setup-nginx-ota.sh n√£o encontrado"
        echo "üí° Execute primeiro: sudo ./setup-nginx-ota.sh"
        exit 1
    fi
    
    if [ -f "./create-firmware-structure.sh" ]; then
        echo "üìÅ Criando estrutura de pastas..."
        sudo ./create-firmware-structure.sh
    fi
fi

# Criar estrutura de diret√≥rios
FIRMWARE_DIR="/var/www/firmware/${DEVICE_TYPE}/${VERSION}"
echo "üìÅ Criando diret√≥rio: $FIRMWARE_DIR"
sudo mkdir -p "$FIRMWARE_DIR"

# Copiar firmware
echo "üì¶ Copiando firmware..."
sudo cp "$FIRMWARE_FILE" "$FIRMWARE_DIR/firmware.bin"

# Gerar checksum
echo "üîê Gerando checksum MD5..."
cd "$FIRMWARE_DIR"
sudo md5sum firmware.bin > checksum.md5

# Criar version.json
echo "üìÑ Criando version.json..."
sudo tee "$FIRMWARE_DIR/version.json" > /dev/null << EOF
{
  "version": "$VERSION",
  "device_type": "$DEVICE_TYPE", 
  "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "description": "Firmware $VERSION para $DEVICE_TYPE",
  "file_size": $FILE_SIZE,
  "download_url": "http://firmware.iot.local/firmware/$DEVICE_TYPE/$VERSION/firmware.bin",
  "checksum_url": "http://firmware.iot.local/firmware/$DEVICE_TYPE/$VERSION/checksum.md5",
  "changelog": [
    "Nova vers√£o de firmware",
    "Atualiza√ß√£o via OTA"
  ]
}
EOF

# Ajustar permiss√µes
echo "üîß Ajustando permiss√µes..."
sudo chown -R www-data:www-data "$FIRMWARE_DIR"
sudo chmod -R 644 "$FIRMWARE_DIR"/*
sudo chmod 755 "$FIRMWARE_DIR"

# Atualizar link latest
echo "üîó Atualizando link 'latest'..."
DEVICE_DIR="/var/www/firmware/${DEVICE_TYPE}"
sudo rm -f "$DEVICE_DIR/latest"
sudo ln -sf "$VERSION" "$DEVICE_DIR/latest"

# Verificar resultado
echo ""
echo "‚úÖ Firmware adicionado com sucesso!"
echo "=================================="
echo "üìÇ Localiza√ß√£o: $FIRMWARE_DIR"
echo "üìä Tamanho: $(numfmt --to=iec $FILE_SIZE)"
echo "üîê MD5: $(cat $FIRMWARE_DIR/checksum.md5 | cut -d' ' -f1)"
echo ""
echo "üåê URLs dispon√≠veis:"
echo "  üì± Download: http://firmware.iot.local/firmware/$DEVICE_TYPE/latest/firmware.bin"
echo "  üìÑ Vers√£o:   http://firmware.iot.local/firmware/$DEVICE_TYPE/latest/version.json"
echo "  üîê Checksum: http://firmware.iot.local/firmware/$DEVICE_TYPE/latest/checksum.md5"
echo ""

# Testar URLs
echo "üß™ Testando URLs..."

# Testar nginx
if curl -s -f "http://firmware.iot.local/api/version" > /dev/null; then
    echo "‚úÖ Servidor nginx OTA funcionando"
else
    echo "‚ùå Servidor nginx n√£o est√° respondendo"
    echo "üí° Verifique se nginx est√° rodando: sudo systemctl status nginx"
fi

# Testar arquivo
if curl -s -I "http://firmware.iot.local/firmware/$DEVICE_TYPE/latest/firmware.bin" | grep -q "200 OK"; then
    echo "‚úÖ Firmware acess√≠vel via HTTP"
else
    echo "‚ö†Ô∏è  Firmware pode n√£o estar acess√≠vel via HTTP"
fi

# Testar version.json
if curl -s "http://firmware.iot.local/firmware/$DEVICE_TYPE/latest/version.json" | jq . > /dev/null 2>&1; then
    echo "‚úÖ version.json v√°lido"
else
    echo "‚ö†Ô∏è  version.json pode ter problemas"
fi

echo ""
echo "üéØ Pr√≥ximos passos:"
echo "  1. Acesse o dashboard web em http://localhost:8002"
echo "  2. V√° em 'Tipos de Dispositivo'"
echo "  3. Clique no bot√£o 'Atualizar Firmware' do tipo correspondente"
echo "  4. Monitore os logs de atualiza√ß√£o"
echo ""
echo "üìã Para listar todos os firmwares:"
echo "  ls -la /var/www/firmware/"
echo ""
echo "üîÑ Para disparar OTA via API:"
echo "  curl -X POST \"http://localhost:8000/api/mqtt/device-types/ID/ota-update\" \\"
echo "    -H \"Content-Type: application/json\" \\"
echo "    -d '{\"target_devices\": \"all\"}'" 