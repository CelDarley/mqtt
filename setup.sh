#!/bin/bash
# setup.sh - Setup completo do ambiente MQTT

set -e  # Parar em caso de erro

echo "üöÄ Iniciando setup completo do ambiente MQTT..."

# Verificar pr√©-requisitos
if ! command -v php &> /dev/null; then
    echo "‚ùå PHP n√£o encontrado. Instale PHP 8.2+ primeiro."
    exit 1
fi

if ! command -v composer &> /dev/null; then
    echo "‚ùå Composer n√£o encontrado. Instale o Composer primeiro."
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo "‚ùå NPM n√£o encontrado. Instale Node.js e NPM primeiro."
    exit 1
fi

# Fun√ß√£o para setup de cada projeto
setup_project() {
    local project_dir=$1
    local project_name=$2
    local has_frontend=$3
    
    echo "üì¶ Configurando $project_name..."
    
    if [ ! -d "$project_dir" ]; then
        echo "‚ùå Diret√≥rio $project_dir n√£o encontrado!"
        return 1
    fi
    
    cd "$project_dir"
    
    # Copiar .env se n√£o existir
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "   ‚úÖ Arquivo .env criado"
        else
            echo "   ‚ö†Ô∏è  Arquivo .env.example n√£o encontrado"
        fi
    else
        echo "   ‚ÑπÔ∏è  Arquivo .env j√° existe"
    fi
    
    # Instalar depend√™ncias PHP
    echo "   üì• Instalando depend√™ncias PHP..."
    composer install --no-interaction
    
    # Instalar depend√™ncias NPM se houver frontend
    if [ "$has_frontend" = true ] && [ -f "package.json" ]; then
        echo "   üé® Instalando depend√™ncias NPM..."
        npm install
        echo "   üî® Compilando assets..."
        npm run build
    fi
    
    # Gerar chave se n√£o existir
    if ! grep -q "APP_KEY=base64:" .env 2>/dev/null; then
        echo "   üîë Gerando chave da aplica√ß√£o..."
        php artisan key:generate --no-interaction
    else
        echo "   ‚ÑπÔ∏è  Chave da aplica√ß√£o j√° existe"
    fi
    
    # Limpar caches
    echo "   üßπ Limpando caches..."
    php artisan config:clear
    php artisan cache:clear
    php artisan route:clear 2>/dev/null || true
    php artisan view:clear 2>/dev/null || true
    
    # Executar migra√ß√µes
    echo "   üóÑÔ∏è  Executando migra√ß√µes..."
    php artisan migrate --no-interaction
    
    # Ajustar permiss√µes
    echo "   üîí Ajustando permiss√µes..."
    chmod -R 775 storage bootstrap/cache 2>/dev/null || true
    
    echo "   ‚úÖ $project_name configurado com sucesso!"
    cd ..
}

# Setup dos projetos
setup_project "mqtt" "Backend (API MQTT)" false
setup_project "iot-config-app-laravel" "Frontend App" true
setup_project "iot-config-web-laravel" "Frontend Web" true

echo ""
echo "üéâ Setup completo finalizado!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "   1. Verificar/atualizar configura√ß√µes nos arquivos .env"
echo "   2. Criar usu√°rio administrador: php create_admin_user.php"
echo "   3. Iniciar servidores:"
echo "      - Backend: cd mqtt && php artisan serve"
echo "      - App: cd iot-config-app-laravel && php artisan serve --port=8001"
echo "      - Web: cd iot-config-web-laravel && php artisan serve --port=8002"
echo ""
echo "üåê URLs dos servi√ßos:"
echo "   - API: http://localhost:8000"
echo "   - App IoT: http://localhost:8001"
echo "   - Web Admin: http://localhost:8002"
echo "" 